// useSocketStore.ts - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà
import { create } from "zustand";
import { io } from "socket.io-client";
import type { SocketState } from "../types/socketTypes";
import { initMessageListner, cleanupMessageListeners } from "../socket/messageListner";
import { authApi } from "@/api/auth";

const URL = "http://localhost:5000";

export const useSocketStore = create<SocketState>((set, get) => ({
  socket: null,
  isConnected: false,
  reconnectAttempts: 0,
  maxReconnectAttemps: 5,
  isConnecting: false, // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ connect ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á

  // ACTIONS
  connect: async () => {
    const { socket: currentSocket, isConnecting } = get();
    
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ connect ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    if (isConnecting) {
      console.log("[SOCKET] Connection already in progress...");
      return;
    }

    if (currentSocket?.connected) {
      console.log("[SOCKET] Already connected, skipping...");
      return;
    }

    set({ isConnecting: true });

    try {
      console.log("[SOCKET] Getting access token...");
      
      // 1. ‡πÄ‡∏≠‡∏≤ access token ‡∏Å‡πà‡∏≠‡∏ô
      const tokenResponse = await authApi.clientGetTokenSocket(new AbortController().signal);
      const accessToken = tokenResponse.accessToken;
      
      console.log("[SOCKET] Creating new socket connection...");
      
      // 2. cleanup socket ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (currentSocket) {
        cleanupMessageListeners(currentSocket);
        currentSocket.disconnect();
      }
      
      // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á socket ‡πÉ‡∏´‡∏°‡πà
      const newSocket = io(URL, {
        autoConnect: false,
        withCredentials: true,
        auth: {
          token: accessToken
        }
      });

      // 4. setup event handlers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö socket connection
      newSocket.on("connect", () => {
        console.log(`[SOCKET] ‚úÖ Connected with id: ${newSocket.id}`);
        set({
          isConnected: true,
          socket: newSocket,
          reconnectAttempts: 0,
          isConnecting: false
        });
        
        // 5. ‡∏ï‡∏±‡πâ‡∏á message listeners (‡∏™‡πà‡∏á socket instance ‡πÑ‡∏õ)
        console.log("[SOCKET] Initializing listeners...");
        initMessageListner(newSocket);
      });

      newSocket.on("connect_error", (error) => {
        console.error("[SOCKET] Connection error:", error);
        set({ isConnecting: false });
      });

      newSocket.on("disconnect", (reason) => {
        console.warn(`[SOCKET] ‚ùå Disconnected (reason: ${reason})`);
        set({ isConnected: false });
        
        // cleanup listeners ‡πÄ‡∏°‡∏∑‡πà‡∏≠ disconnect
        cleanupMessageListeners(newSocket);
      });

      // 6. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      newSocket.on("token_expired", async () => {
        console.log("[SOCKET] Token expired, reconnecting...");
        cleanupMessageListeners(newSocket);
        newSocket.disconnect();
        set({ isConnected: false });
        
        // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
        setTimeout(() => {
          get().connect();
        }, 1000);
      });

      newSocket.on("reconnect_attempt", (attempt) => {
        console.log(`[SOCKET] üîÑ Reconnect attempt #${attempt}`);
      });

      newSocket.on("reconnect_failed", () => {
        const { reconnectAttempts, maxReconnectAttemps } = get();
        console.error(
          `[SOCKET] ‚ö†Ô∏è Reconnect failed (attempts: ${reconnectAttempts}/${maxReconnectAttemps})`
        );

        if (reconnectAttempts < maxReconnectAttemps) {
          set({ reconnectAttempts: reconnectAttempts + 1 });
          console.log("[SOCKET] Retrying connection in 2s...");
          setTimeout(() => get().connect(), 2000);
        } else {
          console.error("[SOCKET] ‚ùå Max reconnect attempts reached");
          set({ isConnecting: false });
        }
      });

      // 7. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
      console.log("[SOCKET] Connecting...");
      newSocket.connect();

    } catch (error) {
      console.error("[SOCKET] Failed to get token or connect:", error);
      set({ isConnecting: false });
      
      // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á redirect ‡πÑ‡∏õ login ‡∏´‡∏£‡∏∑‡∏≠ show error message
      // ‡∏´‡∏£‡∏∑‡∏≠ retry ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏´‡∏ô‡∏∂‡πà‡∏á
    }
  },

  disconnect: () => {
    const { socket } = get();
    if (socket) {
      console.log("[SOCKET] üîå Disconnecting manually...");
      
      // cleanup listeners ‡∏Å‡πà‡∏≠‡∏ô disconnect
      cleanupMessageListeners(socket);
      socket.disconnect();
      
      set({
        isConnected: false,
        socket: null,
        reconnectAttempts: 0,
        isConnecting: false
      });
    } else {
      console.log("[SOCKET] No active socket to disconnect");
    }
  },

  emit: (event, data) => {
    const { socket } = get();
    if (socket?.connected) {
      console.log(`[SOCKET] üì§ Emit: ${event}`, data);
      socket.emit(event, data);
    } else {
      console.warn(
        `[SOCKET] ‚ö†Ô∏è Tried to emit "${event}", but socket is disconnected`
      );
    }
  },

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö force reconnect
  forceReconnect: () => {
    console.log("[SOCKET] Force reconnecting...");
    get().disconnect();
    setTimeout(() => {
      get().connect();
    }, 500);
  }
}));