generator client {
  provider = "prisma-client-js"
  shadowDatabaseUrl = env("DATABASE_URL")
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ===============================================
//           AUTHENTICATION & USER
// ===============================================
model User {
  id                    Int                   @id @default(autoincrement())
  email                 String                @unique
  username              String                @unique
  password              String   
  display_name          String?               // ชื่อที่แสดง
  bio                   String?               // แนะนำตัว
  avatar_url            String?               // รูปโปรไฟล์
  is_verified           Boolean               @default(false) // verified account
  is_private            Boolean               @default(false) // private account
  createdAt             DateTime              @default(now())
  last_active_at        DateTime?             @default(now()) 
  updated_at            DateTime              @updatedAt

  sentMessages          Message[]             @relation("Sender")
  posts                 Post[]                @relation("Posted")
  likes                 Like[]                @relation("Liked")
  comments              Comment[]             @relation("Commented")
  participants          Participant[]
  followers             Follow[]              @relation("Following")  // คนที่ follow เรา
  following             Follow[]              @relation("Follower")   // คนที่เรา follow
  notifications_received Notification[]       @relation("NotificationReceiver")
  notifications_sent    Notification[]        @relation("NotificationActor")
}

model Follow {
  id           Int      @id @default(autoincrement())
  follower_id  Int      // คนที่ follow
  following_id Int      // คนที่ถูก follow
  created_at   DateTime @default(now())

  follower  User @relation("Follower", fields: [follower_id], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [following_id], references: [id], onDelete: Cascade)
 
  @@unique([follower_id, following_id])
}

enum ConversationType {
  PRIVATE
  GROUP
}

// ===============================================
//           MESSAGING
// ===============================================
model Conversation {
  id           Int              @id @default(autoincrement())
  type         ConversationType @default(PRIVATE)
  name         String?
  created_at   DateTime         @default(now())
  updated_at   DateTime?         @updatedAt

  messages     Message[]
  participants Participant[]
}

model Participant {
  id                    Int       @id @default(autoincrement())
  conversation_id       Int
  user_id               Int
  joined_at             DateTime  @default(now())
  last_read_message_id  Int?
  
  // --- RELATION ---
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade) 
  conversation Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  
  // --- CONSTRAINT ---
  @@unique([conversation_id, user_id])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
  SYSTEM // For system message
}

model Media {
  id            Int      @id @default(autoincrement())
  filename      String
  original_name String
  file_path     String
  file_size     Int
  mime_type     String
  created_at    DateTime @default(now())
  post_id       Int?
  message_id    Int?
  
  post    Post?    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  message Message? @relation(fields: [message_id], references: [id], onDelete: Cascade)
}

model Message {
  id              Int         @id @default(autoincrement())
  conversation_id Int
  sender_id       Int
  content         String      @db.Text
  message_type    MessageType @default(TEXT)
  sent_at         DateTime    @default(now())
  is_edited       Boolean     @default(false)
  is_deleted      Boolean     @default(false)
  deleted_at      DateTime?
  edited_at       DateTime?

  // --- RELATION ---
  sender          User           @relation("Sender", fields: [sender_id], references: [id], onDelete: Cascade)
  conversation    Conversation   @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  medias          Media[]
  notifications   Notification[]
}

// ===============================================
//           SOCIAL (POSTS)
// ===============================================
model Post {
  id         Int       @id @default(autoincrement())
  content    String    @db.Text
  created_at DateTime  @default(now())
  updated_at DateTime?
  author_id  Int

  // --- RELATION ---
  author        User           @relation("Posted", fields: [author_id], references: [id], onDelete: Cascade)
  likes         Like[] 
  comments      Comment[]
  medias        Media[]
  notifications Notification[]
}

model Like {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  author_id  Int
  post_id    Int?
  comment_id Int?

  // --- RELATION ---
  author  User     @relation("Liked", fields: [author_id], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  // --- CONSTRAINT ---
  @@unique([author_id, post_id])
  @@unique([author_id, comment_id])
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String    @db.Text
  created_at DateTime  @default(now())
  updated_at DateTime?
  author_id  Int
  post_id    Int
  parent_id  Int?
  
  // --- RELATION ---
  author        User           @relation("Commented", fields: [author_id], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [post_id], references: [id], onDelete: Cascade)
  parent        Comment?       @relation("CommentReplies", fields: [parent_id], references: [id])
  replies       Comment[]      @relation("CommentReplies")
  likes         Like[]
  notifications Notification[]
}

// ===============================================
//           NOTIFICATION
// ===============================================
enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MESSAGE 
  MENTION
}

model Notification {
  id         Int              @id @default(autoincrement())
  type       NotificationType
  content    String 
  is_read    Boolean          @default(false)
  created_at DateTime         @default(now())

  // ผู้รับ notification
  user_id Int
  user    User @relation("NotificationReceiver", fields: [user_id], references: [id], onDelete: Cascade)

  // ผู้ที่ทำ action (optional)
  actor_id Int?
  actor    User? @relation("NotificationActor", fields: [actor_id], references: [id], onDelete: SetNull)

  // Reference ไปยัง entity ที่เกี่ยวข้อง
  post_id    Int?
  comment_id Int?
  message_id Int?

  post    Post?    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  message Message? @relation(fields: [message_id], references: [id], onDelete: Cascade)
}